Scalar Functions:

1.
SELECT UCASE(NAME) FROM Students; 

2.
SELECT LCASE(NAME) FROM Students; 

3.
SELECT MID(NAME,1,4) FROM Students;

4.
SELECT LENGTH(NAME) FROM Stuents;

5.
SELECT ROUND(MARKS,0) FROM table_name;

6.
SELECT NAME, NOW() AS DateTime FROM Students;

7.
SELECT NAME, FORMAT(Now(),'YYYY-MM-DD') AS Date FROM
Students; 


Procedure:
DELIMITER //

	CREATE PROCEDURE deleteproc(INOUT a int)

	BEGIN
		
        DELETE FROM details WHERE id =a;
        
	END //

DELIMITER ;


INNER JOIN
LEFT JOIN
RIGHT JOIN
FULL JOIN



------------------------------------------------------------------------

constraint keys:
primary->
foreign
unique



joins


views

indexer
1.

CREATE INDEX myindex
ON user (name,email);

2.

normalization

procedure &function

DELIMITER //

CREATE PROCEDURE selectdata(INOUT myid int)

BEGIN

SELECT*FROM user WHERE id=myid;

END //

DELIMITER ;

SET @po='5';
CALL selectdata(@po);




update:

DELIMITER //

CREATE PROCEDURE selectdata(INOUT myid int)

BEGIN

UPDATE user set name='java' WHERE id=myid;

END //

DELIMITER ;



trigger
CREATE TRIGGER insetlog AFTER INSERT ON user FOR EACH ROW INSERT INTO person VALUES(null,'a','a')

steps:

1)CREATE DATABASE test;
CREATE TABLE `subscribers` (
  `id` int(11) NOT NULL,
  `fname` varchar(200) NOT NULL,
  `email` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
ALTER TABLE `subscribers` ADD PRIMARY KEY (`id`);
ALTER TABLE `subscribers` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;

2)CREATE TABLE `audit_subscribers` (
  `id` int(11) NOT NULL,
  `subscriber_name` varchar(200) NOT NULL,
  `action_performed` varchar(400) NOT NULL,
  `date_added` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
ALTER TABLE `audit_subscribers` ADD PRIMARY KEY (`id`);
ALTER TABLE `audit_subscribers` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;

3)
DELIMITER 

$$
CREATE TRIGGER `before_subscriber_insert` BEFORE INSERT ON 
`subscribers` FOR EACH ROW 


BEGIN
   
 INSERT INTO audit_subscribers
    SET action_performed  = 'Inserted a new subscriber',
    subscriber_name       =  new.fname;

END
$$


DELIMITER ;

4)
DELIMITER 
$$
CREATE TRIGGER `after_subscriber_delete` 
AFTER DELETE ON `subscribers` 
FOR EACH ROW 


BEGIN
    
INSERT INTO audit_subscribers
    SET action_performed  = 'Deleted a subscriber',
    subscriber_name =OLD.fname;

END
$$


DELIMITER ;

5)DELIMITER 

$$
CREATE TRIGGER `after_subscriber_edit` 
AFTER UPDATE ON `subscribers` 
FOR EACH ROW 

BEGIN
    
INSERT INTO audit_subscribers
 SET action_performed  = 'Updated a subscriber',
subscriber_name =  OLD.fname;

END
$$

DELIMITER ;


joins:


INNER JOIN	

SELECT column_name(s)
FROM table_name1
INNER JOIN table_name2 
ON table_name1.column_name=table_name2.column_name
*******************************************************************************************************
LEFT JOIN	

SELECT column_name(s)
FROM table_name1
LEFT JOIN table_name2 
ON table_name1.column_name=table_name2.column_name
*******************************************************************************************************
RIGHT JOIN	

SELECT column_name(s)
FROM table_name1
RIGHT JOIN table_name2 
ON table_name1.column_name=table_name2.column_name
*******************************************************************************************************
FULL JOIN	

SELECT column_name(s)
FROM table_name1
FULL JOIN table_name2 
ON table_name1.column_name=table_name2.column_name

------------------------------------------------------------------------------------------------------------------


DDL
1. create database
CREATE DATABASE databasenm;

2. create table
CREATE TABLE TABLE_NAME(id int PRIMARY KEY AUTO_INCREMENT,
countrynm varchar(255))

3. add column
ALTER TABLE tablenm ADD columnnm datatype;

4.  particular column after column add
ALTER TABLE tablenm ADD columnnm datatype AFTER column; 


5. datatyape change
ALTER TABLE tablenm MODIFY columnnm datatype;


6. Rename column
ALTER table TABLE_NAME CHANGE oldcolumnnm newcolumnnm varchar(255)

7. Remove column
ALTER TABLE TABLE_NAME drop columnnm;

8. only data delete structure will be as it is 
TRUNCATE TABLE country

9. drop table
DROP TABLE state

10. rename table
RENAME TABLE country TO coun

===================================
DML
11. insert data
insert into tablename (database Field nm) values ('control value')

12. multiple value insert
INSERT INTO tablename (countrynm) VALUES('india'), ('pakistan')


13. update data
update tablenm set databasefieldnm='controlvalue' where id='id'

14. delete data
delete from tablenm where id='id'
======================================
DQL
15. select all
select * from tablenm

16. particular column dispaly
SELECT columnnm from tablenm

17. particular row display
select * from tablenm where id='id' 

18.order by
select colnm from tblnm order by colnm asc/desc
------------------------------------------------------------------------------------------
18. join
select * from state join coun on state.cid=coun.cid

19.commit:
START TRANSACTION;

//delete from register where uid=1;

//commit;

/*20.rollback:
START TRANSACTION;*/

/*delete from register where uid=1;

rollback;*/

21.join:
SELECT id  FROM cds INNER JOIN tops  ON cds.id = tops.id


--------------------------------------------------------------


DML
insert
multiple value insert
update
delete

DQL
select all
select row
select col
order by

DCL
rollback
commit

Agreegate function
SELECT MAX(salary) FROM signup;
SELECT MIN(salary) FROM signup;
SELECT SUM(salary) FROM signup;
SELECT AVG(salary) FROM signup;

JOINS:
JOIN(INNER JOIN)->Common
LEFT JOIN->Common,left all
RIGHT JOIN->Common,right all


JAVA+DATABASE[mysql-connector]
